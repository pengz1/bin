#!/bin/bash
#Program:
#    This program is used to run unit test commands under node
#History:
#    Created on 20160616
#    Update on 20170817:
#       1. Move all actions to a single function
#       2. Refine methods to generate product code name and unit test code name
code="" 
product_code="" # product code should be .js, .json is only for schema
ut_code="" # unit test code should be xxx-spec.js

get_name_wo_suffix(){
    code=${code/%".js"/''}
    code=${code/%".json"/''}
    if [ -z `echo ${code} | grep 'spec/'` ]
    then
        product_code=${code}'.js'
        ut_code='spec/'${code}'-spec.js'
    else
        product_code=${code/%"-spec"/''}'.js'
        product_code=${product_code/spec\//}
        ut_code=${code}'.js'
    fi
}

run_unit_test(){
    get_name_wo_suffix
    set -x
    ./node_modules/mocha/bin/mocha ${ut_code} -R spec --require spec/helper.js
    set +x
}

check_grammar(){
    get_name_wo_suffix
    if [ ${code: -5} = '-spec' ]
    then
        rcheck ${ut_code} ${product_code}
    else
        rcheck ${product_code} ${ut_code}
    fi

}

report_coverage(){
    get_name_wo_suffix
    set -x
    ./node_modules/.bin/istanbul cover -x ${ut_code} ./node_modules/.bin/_mocha -- ${ut_code} -R xunit-file --require spec/helper.js
    ./node_modules/.bin/istanbul report cobertura
    set +x
}

while getopts 'u:c:r:' OPT; do
    case $OPT in
        c)#Use jshint to check grammar for code and its unit test document
            code=$OPTARG
            check_grammar
            ;;
        r)#Report test coverage
            code=$OPTARG
            report_coverage
            ;;
        u)#Run unit test for a document
            code=$OPTARG
            run_unit_test
            ;;
        ?)
            echo "Invalide parameter $1"
            exit 1
    esac
done
